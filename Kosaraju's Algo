#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends



class Solution
{
	public:
	void DFS1st(int V,vector<int>adj[],stack<int>&s,bool *visited,int sv)
{
    visited[sv]=true;
    for(auto x:adj[sv])
    {
        if(!visited[x])
        DFS1st(V,adj,s,visited,x);
    }
    s.push(sv);
}
void DFS2nd(int V,vector<int>adj[],bool *visited,int sv)
{
    visited[sv]=true;
    for(auto x:adj[sv])
    {
        if(!visited[x])
        DFS2nd(V,adj,visited,x);
    }
    
}
void ReverseGraph(int V,vector<int>adj[],vector<int>temp[])
{
    //Reverse Graph
  
  for(int i=0;i<V;i++)
    {
        for(auto x:adj[i])
        {
            temp[x].push_back(i);
        }
    }
    
}
int kosaraju(int V, vector<int> adj[])
{
    // Your code here
  stack<int>s;
  bool *visited=new bool[V];
  for(int i=0;i<V;i++)
  visited[i]=false;
  for(int i=0;i<V;i++)
  {
      if(!visited[i])
      DFS1st(V,adj,s,visited,i);
  }
  vector<int>temp[V];
  ReverseGraph(V,adj,temp);
  for(int i=0;i<V;i++)
  visited[i]=false;
  int count=0;
  while(!s.empty())
  {
      int front=s.top();
      s.pop();
      if(!visited[front])
      {
          count++;
          DFS2nd(V,temp,visited,front);
      }
      
  }
  return count;
}
	//Function to find number of strongly connected components in the graph.
   
};

// { Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}

  // } Driver Code Ends
